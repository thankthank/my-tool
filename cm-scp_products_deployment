#!/bin/bash
##########################################
## Please read this before deployment.
## Locate the airgap tarbal and this script together in a directory where you want to put these file. 
## And run the this deployment script. Don't remove deployment_script.

## This script SCPs the bash script generated by this script to target hosts and run the generated script on target hosts.
## So this script has a framework called SCP_RUN Framework. I commented '## SCP_RUN Framework Begins/Ends ##' for the framework respectively.

## Normally, users only changes values and functions between '## USER jobs Begins/Ends ##'
##########################################

## SCP_RUN Framework Begins  ##

# define the dir where tar balls deployed two times. one in here and the other in framework_static_env.sh
froTAR_DEPLOYED_DIR="/root"

source $froTAR_DEPLOYED_DIR/local_repo/my-tool/frk/framework_static_env.sh
source $froTAR_DEPLOYED_DIR/local_repo/my-tool/frk/framework_dynamic_env.sh

## Sourcing Module Environment values
## This environment values also need to be included in the generated script.
## th enviromnet values should be static values. If it is dynamic values, the values here and in the generated documents can be different.
source $froLOCAL_REPO_DIR/my-tool/mod/*_env.sh

## Mapping between target in framework and env.
source $froLOCAL_REPO_DIR/my-tool/mod/*target_mapping.sh

## It will run at first to deploy tar
if [[ ! -e $fre_MY_TOOL_INSTALLED_DIR/$freSCRIPT_NAME ]];then 

	# Untar the tarball
#	for i in ${froTAR_BALL_AIRGAPPED[@]};do
#		FILE_EXTENSION=${i##*.}
#		if [[ $FILE_EXTENSION == "tar" ]];then tar xvf $i -C $froTAR_DEPLOYED_DIR/
#		else tar xvfz $i -C $froTAR_DEPLOYED_DIR/
#		fi
		# Delete the tar ball to save space
#		rm -f $i
#	done;

	# Create symbolic link for deployment script.
	ln -sf $PWD/$freSCRIPT_NAME $fre_MY_TOOL_INSTALLED_DIR/$freSCRIPT_NAME

#	cd $froLOCAL_REPO_DIR
#	./deploy_repos.sh
#
#	zypper --non-interactive in vim sudo;

#	echo "The tar ball are deployed"
	echo "vim $fre_MY_TOOL_INSTALLED_DIR/$freSCRIPT_NAME, uncomment and run the functions one by one"
#	exit 0
fi;

## The generated script, which will be excuited on targets, generation begins #
## This is where you can import module scripts.
echo '#!/bin/bash' > /tmp/$freGENERATED_SCRIPT;
cat $froTAR_DEPLOYED_DIR/local_repo/my-tool/frk/framework_static_env.sh >> /tmp/$freGENERATED_SCRIPT;
# It includes libraries functions
cat $froLOCAL_REPO_DIR/my-tool/lib/*.sh >> /tmp/$freGENERATED_SCRIPT;
# It includes env, targetmapping scripts.
cat $froLOCAL_REPO_DIR/my-tool/mod/*_env.sh >> /tmp/$freGENERATED_SCRIPT;
cat $froLOCAL_REPO_DIR/my-tool/mod/*target_mapping.sh  >> /tmp/$freGENERATED_SCRIPT;
# It includes functions scripts.
cat $froLOCAL_REPO_DIR/my-tool/frk/framework_func.sh >> /tmp/$freGENERATED_SCRIPT;
cat $froLOCAL_REPO_DIR/my-tool/mod/*_func.sh >> /tmp/$freGENERATED_SCRIPT;

cat << EOT >> /tmp/$freGENERATED_SCRIPT
## SCP_RUN Framework Begins  ##
## Do not Remove Below '## Here to run'. This will be used for target setting
## Here to run
## SCP_RUN Framework Ends    ##
EOT

# It includes main of module scripts.
cat $froLOCAL_REPO_DIR/my-tool/mod/*_main.sh >> /tmp/$freGENERATED_SCRIPT;

cat << EOT >> /tmp/$freGENERATED_SCRIPT
## SCP_RUN Framework Begins  ##
## Do not Remove Below '## Here done'. This will be used for target setting
## Here done
## SCP_RUN Framework Ends    ##
EOT
## The file, which will be excuited on targets, generation ends   ##

##################################################
## The Essential part of The SCP_RUN Framework  ##
##################################################
## Framework Target setting (= Mapping hostname array to SCP_RUN Target)
# It looks for targets on which the script will run using function names
# espacially, SCP_RUN_Target name will be reside at the end of function name after '_'. e.g. this_is_function_Management
# Regarding SCP_RUN_Target and hoatname array mapping, two parts with "## mapping" below need to be configured.
rm -f /tmp/${freSCRIPT_NAME}_HosSe.t;touch /tmp/${freSCRIPT_NAME}_HosSe.t;
rm -f /tmp/${freSCRIPT_NAME}_function.t; touch /tmp/${freSCRIPT_NAME}_function.t;
# The generated script will be used to find target.
if [[ -e /tmp/$freGENERATED_SCRIPT  ]]; then freSCRIPT_NAME_FOUND="/tmp/$freGENERATED_SCRIPT";else freSCRIPT_NAME_FOUND="/tmp/$freGENERATED_SCRIPT";fi;
awk  -v VHOS="/tmp/${freSCRIPT_NAME}_HosSe.t" -v VFUN="/tmp/${freSCRIPT_NAME}_function.t;"  $'
	BEGIN{VEXE=0};{
	if($0=="## Here to run") {VEXE=1;};
	## mapping
	if(VEXE==1 && ($0~/on_GRP0$/ || $0~/on_GRP1$/ || $0~/on_GRP2$/ || $0~/on_GRP3$/ || $0~/on_GRP4$/ || $0~/on_GRP5$/ || $0~/on_Temp$/  ) && $1 !~/^ *#/) {
		print "echo "$NF" >> "VHOS;  
		print "BA="$1";echo ${BA} >> "VFUN;  
	};
	if($1=="## Here done") {VEXE=0;}
	};
' ${freSCRIPT_NAME_FOUND}  | bash
SCP_RUN_Target_Num=$(awk '!a[$0]++' /tmp/${freSCRIPT_NAME}_HosSe.t | wc -l) 
SCP_RUN_TARGET=$(awk '!a[$0]++' /tmp/${freSCRIPT_NAME}_HosSe.t) 
SCP_RUN_FUNCTIONS=$(cat /tmp/${freSCRIPT_NAME}_function.t)
NUM=$SCP_RUN_Target_Num

# Set up SCP_RUN_TARGET with the enabled SCP_RUN_TARGET above
# This part will be changed depending on script. Here, you define SCP_RUN_TARGET!
HOSTS_PRE=();
if (( NUM > 1 ));then  echo "More than one SCP RUN Targets as follows. Please specify only one type of target!";echo $SCP_RUN_TARGET;  exit 1;
else
	## mapping
	if [[ $SCP_RUN_TARGET == "on_GRP0" ]]; then HOSTS_PRE=("${GRP0[@]}"); fi;
	if [[ $SCP_RUN_TARGET == "on_GRP1" ]]; then HOSTS_PRE=("${GRP1[@]}"); fi;
	if [[ $SCP_RUN_TARGET == "on_GRP2" ]]; then HOSTS_PRE=("${GRP2[@]}"); fi; 
	if [[ $SCP_RUN_TARGET == "on_GRP3" ]]; then HOSTS_PRE=("${GRP3[@]}"); fi; 
	if [[ $SCP_RUN_TARGET == "on_GRP4" ]]; then HOSTS_PRE=("${GRP4[@]}"); fi; 
	if [[ $SCP_RUN_TARGET == "on_GRP5" ]]; then HOSTS_PRE=("${GRP5[@]}"); fi; 
	if [[ $SCP_RUN_TARGET == "Temp" ]]; then HOSTS_PRE=("${HOSTS_TEMP[@]}");     fi; 
fi;
rm -f /tmp/${freSCRIPT_NAME}_HosSe.t;
rm -f /tmp/${freSCRIPT_NAME}_function.t;


#Remove duplication in HOSTS_PRE array
HOSTS=();
for i in "${HOSTS_PRE[@]}";do 
	(( non=0 ));for ii in "${HOSTS[@]}";do
		if [[ $ii != $i  ]]; then (( non=non+1 ));fi
	done
	HOSTS_COUNT=${#HOSTS[@]}
	if (( non == HOSTS_COUNT )); then HOSTS[$HOSTS_COUNT]=$i;fi
done

##Script will be SCPed and run in the remote hosts
echo;
echo "============================================================"
echo "The functions will run on the target hosts";
echo;
echo "Functions : "$SCP_RUN_FUNCTIONS
echo "Target group : "${GRP_MAP[$SCP_RUN_TARGET]}
echo 'Target IP addresses: '${HOSTS[@]}
echo "============================================================"
while true;do echo -n "Input 'y' and 'Enter' to continue.....";read INPUT; if [[ $INPUT == "y" ]];then  break;fi;done
for i in "${HOSTS[@]}";
do

        echo;echo "================CMD_Started on $i==================";
        scp -o StrictHostKeyChecking=no  /tmp/$freGENERATED_SCRIPT $freUSER@$i:$freSCP_RUN_Target_dir/${freGENERATED_SCRIPT}_copy;
	ssh -o StrictHostKeyChecking=no $freUSER@$i bash ${freSCP_RUN_Target_dir}/${freGENERATED_SCRIPT}_copy
	ssh -o StrictHostKeyChecking=no $freUSER@$i rm -f ${freSCP_RUN_Target_dir}/${freGENERATED_SCRIPT}_copy
## If root user is not allowed
#	ssh -o StrictHostKeyChecking=no $freUSER@$i sudo su - root -c "\"bash ${freSCP_RUN_Target_dir}/${freGENERATED_SCRIPT}_copy\""
#	ssh -o StrictHostKeyChecking=no $freUSER@$i sudo su - root -c "\"rm -f ${freSCP_RUN_Target_dir}/${freGENERATED_SCRIPT}_copy\""
	echo "================CMD_Done==================";
        echo;

done;

#rm -f /tmp/$freGENERATED_SCRIPT;
echo "================ALL_Done==================";
## SCP_RUN Framework Ends    ##
